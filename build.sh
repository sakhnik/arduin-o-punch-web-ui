#!/bin/bash -e

this_dir=$(readlink -f $(dirname "${BASH_SOURCE[0]}"))
cpp="$this_dir/WebUI.cpp"

npm run build
cd public

cat >|"$cpp" <<END
// Autogenerated file, do not edit manually. See arduin-o-punch-web-ui/build.sh

#ifdef ESP32

#include <Arduino.h>
#include <WebServer.h>

// *INDENT-OFF*

END

format_text() {
    varname=$1
    file=$2

    echo "const char *$varname PROGMEM = R\"html("
    cat $file
    echo ")html\";"
}

format_binary() {
    varname=$1
    file=$2

    xxd -i -n $varname $file | sed "s/$varname\[\] =/$varname[] PROGMEM =/"
}

format_text index_html index.html >>"$cpp"
format_text global_css global.css >>"$cpp"
format_text build_bundle_css build/bundle.css >>"$cpp"
format_text build_bundle_js build/bundle.js | sed 's|0\.0\.0-abcdef|)html" PROJECT_VERSION "-" GIT_REVISION R"html(|' >>"$cpp"
format_binary favicon_png favicon.png >>"$cpp"

cat >>"$cpp" <<END

// *INDENT-ON*

extern WebServer webServer;

void RegisterWebUI()
{
    webServer.on("/", [] {
        webServer.send(200, "text/html", index_html);
    });
    webServer.onNotFound([]() {
        webServer.send(200, "text/html", index_html);
    });
    webServer.on("/favicon.png", [] {
        webServer.send_P(200, PSTR("image/png"), reinterpret_cast<const char *>(favicon_png), favicon_png_len);
    });
    webServer.on("/global.css", [] {
        webServer.send(200, "text/css", global_css);
    });
    webServer.on("/build/bundle.css", [] {
        webServer.send(200, "text/css", build_bundle_css);
    });
    webServer.on("/build/bundle.js", [] {
        webServer.send(200, "text/javascript", build_bundle_js);
    });
}

#endif //ESP32
END
